@model Projector.Models.ViewModels.AssignmentViewModel
@{
    ViewData["Title"] = "Project Assignment";
}

<h1>Project Assignment</h1>
<h4>@Model.ProjectName</h4>
<hr />

<div class="alert" style="display: none;" id="actionStatusAlert"></div>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="form-group">
            <label for="availablePersonsDropdown">Available Persons</label>
            <select class="form-select" id="availablePersonsDropdown">
                <option value="">Select a person...</option>
                @foreach (var person in Model.NotMembers)
                {
                    <option value="@person.Id">@person.LastName, @person.FirstName (@person.Username)</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary mt-4" id="assignButton" disabled>
            Add
        </button>
    </div>
</div>

<div id="currentMembersSection">
    @if (Model.HasCurrMembers)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Username</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var mem in Model.CurrMembers)
                {
                    <tr id="memberRow-@mem.Id">
                        <td>@mem.LastName, @mem.FirstName</td>
                        <td>@mem.Username</td>
                        <td>
                            <button class="btn btn-danger btn-sm remove-member"
                                    data-person-id="@mem.Id">
                                Remove
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info" id="noMembersMessage">
            This project currently has no members.
        </div>
    }
</div>
<div asp-validation-summary="All" class="text-danger"></div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // toggle assign button based on dropdown selection
            $('#availablePersonsDropdown').change(function() {
                $('#assignButton').prop('disabled', $(this).val() === '');
            });

            function showActionStatus(message, isError = false) {
                const alert = $('#actionStatusAlert');
                alert.removeClass('alert-success alert-danger')
                     .addClass(isError ? 'alert-danger' : 'alert-success')
                     .text(message)
                     .show();
                if (!isError) {
                    alert.fadeOut(3000);
                } else {
                    // If it's an error, keep it visible for a while longer
                    setTimeout(() => alert.fadeOut(), 10000);
                }
            }

            // assign member
            document.getElementById('assignButton').addEventListener('click', async function() {
                const projectId = @Model.ProjectId;
                const personId = document.getElementById('availablePersonsDropdown').value;
                const personOption = document.querySelector(`#availablePersonsDropdown option[value="${personId}"]`);
                if (!personId) return;

                const button = this;
                const originalButtonText = button.innerHTML;
                button.disabled = true;
                button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Adding...';

                const response = await fetch(`/projects/${projectId}/assignments/assign/${personId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const data = await response.json();

                if (data.success) {
                    const person = data.person;
                    addMemberToTable(person);
                    personOption.remove();
                    document.getElementById('availablePersonsDropdown').value = '';
                    showActionStatus('Member added successfully');
                } else {
                    showActionStatus(data.message, true);
                }

                button.innerHTML = originalButtonText;
                button.disabled = $('#availablePersonsDropdown').val() === '';
            });

            document.addEventListener('click', async function(e) {
                if (e.target.classList.contains('remove-member')) {
                    const projectId = @Model.ProjectId;
                    const personId = e.target.dataset.personId;
                    const button = e.target;
                    const memberRow = document.getElementById(`memberRow-${personId}`);
                    const originalButtonText = button.innerHTML;

                    button.disabled = true;
                    button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Removing...';

                    const response = await fetch(`/projects/${projectId}/assignments/unassign/${personId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        const person = data.person;
                        memberRow.remove();
                        
                        // Add back to dropdown
                        const dropdown = document.getElementById('availablePersonsDropdown');
                        const option = document.createElement('option');
                        option.value = person.id;
                        option.text = `${person.lastName}, ${person.firstName} (${person.userName})`;
                        dropdown.appendChild(option);

                        if (!document.querySelector('#currentMembersSection tbody tr')) {
                            document.getElementById('currentMembersSection').innerHTML =
                                '<div class="alert alert-info" id="noMembersMessage">' +
                                'This project currently has no members.</div>';
                        }

                        showActionStatus('Member removed successfully');
                    } else {
                        showActionStatus(data.message, true);
                        button.innerHTML = originalButtonText;
                        button.disabled = false;
                    }
                }
            });

            function addMemberToTable(person) {
                let tableBody = $('#currentMembersSection tbody');

                if (!tableBody.length) {
                    $('#noMembersMessage').remove();
                    $('#currentMembersSection').html(`
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Username</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    `);
                    tableBody = $('#currentMembersSection tbody');
                }

                const row = `
                    <tr id="memberRow-${person.id}">
                        <td>${person.lastName}, ${person.firstName}</td>
                        <td>${person.userName}</td>
                        <td>
                            <button class="btn btn-danger btn-sm remove-member" data-person-id="${person.id}">
                                Remove
                            </button>
                        </td>
                    </tr>
                `;

                // Simply append the new row to the table
                tableBody.append(row);
            }
        });
    </script>
}